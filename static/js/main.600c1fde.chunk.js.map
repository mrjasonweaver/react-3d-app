{"version":3,"sources":["components/Menu.js","components/Submarine.js","components/Propeller.js","components/Scene.js","components/Keyboard.js","App.js","reportWebVitals.js","index.js"],"names":["Menu","handleColorChange","handleTextureChange","href","onClick","event","Submarine","currentColor","currentTexture","colorMap","normalMap","roughnessMap","metalnessMap","useGLTF","scene","nodes","materials","useLayoutEffect","Object","assign","Material","map","color","object","Propeller","Scene","upKeyPressed","useTexture","propellerMesh","useRef","useFrame","clock","current","rotation","z","getElapsedTime","Stage","intensity","ref","Keyboard","setUpKeyPressed","useEffect","downHandler","key","upHandler","window","addEventListener","passive","removeEventListener","useKeys","App","crimson","THREE","teal","steelblue","smooth","rough","beatup","useState","setCurrentTexture","setCurrentColor","preventDefault","texture","dpr","camera","fov","attach","args","fallback","OrbitControls","enableZoom","enablePan","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.600c1fde.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Menu = ({handleColorChange, handleTextureChange}) => {\n  return (\n    <nav>\n      <ul>\n        <li>\n          <a href=\"/red\" onClick={event => handleColorChange(event, 'crimson')}>Red</a>\n        </li>\n        <li>\n          <a href=\"/green\" onClick={event => handleColorChange(event, 'teal')}>Green</a>\n        </li>\n        <li>\n          <a href=\"/blue\" onClick={event => handleColorChange(event, 'steelblue')}>Blue</a>\n        </li>\n      </ul>\n      <ul>\n        <li>\n          <a href=\"/smooth\" onClick={event => handleTextureChange(event, 'smooth')}>smooth</a>\n        </li>\n        <li>\n          <a href=\"/aged\" onClick={event => handleTextureChange(event, 'rough')}>rough</a>\n        </li>\n        <li>\n          <a href=\"/beatup\" onClick={event => handleTextureChange(event, 'beatup')}>beatup</a>\n        </li>\n      </ul>\n    </nav>\n  )\n}","import React, { useLayoutEffect }from 'react';\nimport { useGLTF } from '@react-three/drei';\n\nexport const Submarine = ({currentColor, currentTexture, colorMap, normalMap, roughnessMap, metalnessMap}) => {\n  const { scene, nodes, materials } = useGLTF('./models/submarine-without-propeller.gltf');\n\n  useLayoutEffect(() => {\n    Object.assign(materials.Material, { \n      metalnessMap: metalnessMap,\n      normalMap: normalMap,\n      roughnessMap: roughnessMap,\n      map: colorMap,\n      color: currentColor})\n  }, [scene, nodes, materials, currentColor, currentTexture, colorMap, normalMap, roughnessMap, metalnessMap]);\n\n  return <primitive object={scene} />\n};","import React, { useLayoutEffect }from 'react';\nimport { useGLTF } from '@react-three/drei';\n\nexport const Propeller = ({currentColor, currentTexture, colorMap, normalMap, roughnessMap, metalnessMap}) => {\n  const { scene, nodes, materials } = useGLTF('./models/propeller.gltf');\n\n  useLayoutEffect(() => {\n    Object.assign(materials.Material, { \n      metalnessMap: metalnessMap,\n      normalMap: normalMap,\n      roughnessMap: roughnessMap,\n      map: colorMap,\n      color: currentColor})\n  }, [scene, nodes, materials, currentColor, currentTexture, colorMap, normalMap, roughnessMap, metalnessMap]);\n\n  return <primitive object={scene} />\n};","import { useRef } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Stage, useTexture } from '@react-three/drei'\nimport { Submarine } from '../components/Submarine';\nimport { Propeller } from '../components/Propeller';\n\nexport const Scene = ({currentColor, currentTexture, upKeyPressed}) => {\n  const [colorMap, normalMap, roughnessMap, metalnessMap] = useTexture(currentTexture);\n  const propellerMesh = useRef();\n\n  useFrame(({ clock }) => {\n    if (upKeyPressed) {\n      propellerMesh.current.rotation.z = clock.getElapsedTime() * 3;\n    }\n  })\n  return (\n    <Stage intensity={1}>\n      <mesh>\n        <Submarine \n          map={colorMap}\n          normalMap={normalMap}\n          roughnessMap={roughnessMap}\n          metalnessMap={metalnessMap} \n          currentColor={currentColor}\n          currentTexture={currentTexture} />\n      </mesh>\n      <mesh ref={propellerMesh}>\n        <Propeller \n          map={colorMap}\n          normalMap={normalMap}\n          roughnessMap={roughnessMap}\n          metalnessMap={metalnessMap} \n          currentColor={currentColor}\n          currentTexture={currentTexture} />\n      </mesh>\n    </Stage>\n  )\n}","import { useEffect } from 'react';\n\nconst useKeys = (setUpKeyPressed) => {\n  useEffect(() => {\n    const downHandler = ({ key }) => {\n      if (key === 'ArrowUp') {\n        setUpKeyPressed(true);\n      }\n    }\n\n    const upHandler = ({ key }) => {\n      if (key === 'ArrowUp') {\n        setUpKeyPressed(false);\n      }\n    }\n\n    window.addEventListener('keydown', downHandler, { passive: true })\n    window.addEventListener('keyup', upHandler, { passive: true })\n\n    return () => {\n      window.removeEventListener('keydown', downHandler)\n      window.removeEventListener('keyup', upHandler)\n    }\n  }, [setUpKeyPressed])\n}\n\n\nexport const Keyboard = ({setUpKeyPressed}) => {\n  useKeys(setUpKeyPressed);\n  return null;\n}","import React, { Suspense, useState } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls } from '@react-three/drei'\nimport { Menu } from './components/Menu';\nimport { Scene } from './components/Scene';\nimport { Keyboard } from './components/Keyboard';\nimport * as THREE from 'three';\n\nconst App = () => {\n  const crimson = new THREE.Color(0xdc143c);\n  const teal = new THREE.Color(0x008080);\n  const steelblue = new THREE.Color(0x4682b4);\n\n  const smooth = [\n    './textures/Metal030_1K_Color.jpg',\n    './textures/Metal030_1K_NormalGL.jpg',\n    './textures/Metal030_1K_Roughness.jpg',\n    './textures/Metal030_1K_Metalness.jpg',\n  ];\n  \n  const rough = [\n    './textures/Metal040_1K_Color.jpg',\n    './textures/Metal040_1K_NormalGL.jpg',\n    './textures/Metal040_1K_Roughness.jpg',\n    './textures/Metal040_1K_Metalness.jpg',\n  ];\n\n  const beatup = [\n    './textures/Metal021_1K_Color.jpg',\n    './textures/Metal021_1K_NormalGL.jpg',\n    './textures/Metal021_1K_Roughness.jpg',\n    './textures/Metal021_1K_Metalness.jpg',\n  ];\n\n  /** State */\n  const [currentTexture, setCurrentTexture] = useState(smooth);\n  const [currentColor, setCurrentColor] = useState(teal);\n  const [upKeyPressed, setUpKeyPressed] = useState(false);\n\n  /** \n   * @param {MouseEvent} event\n   * @param {string} color - The color to change for the submarine\n   */\n  const handleColorChange = (event, color) => {\n    event.preventDefault();\n    if (color === 'crimson') {\n      setCurrentColor(crimson);\n    } else if (color === 'teal') {\n      setCurrentColor(teal);\n    } else if (color === 'steelblue') {\n      setCurrentColor(steelblue);\n    }\n  };\n  /** \n   * @param {MouseEvent} event\n   * @param {string} texture - The texture to load for the submarine\n   */\n  const handleTextureChange = (event, texture) => {\n    event.preventDefault();\n    if (texture === 'smooth') {\n      setCurrentTexture(smooth);\n    } else if (texture === 'rough') {\n      setCurrentTexture(rough);\n    } else if (texture === 'beatup') {\n      setCurrentTexture(beatup);\n    }\n  };\n\n  return (\n    <div>\n      <Menu \n        handleColorChange={handleColorChange} \n        handleTextureChange={handleTextureChange} />\n      <Canvas dpr={[1, 2]} camera={{ fov: 50 }}>\n        <color attach=\"background\" args={['#253B56']} />\n        <Suspense fallback={null}>\n          <Scene \n            currentTexture={currentTexture} \n            currentColor={currentColor} \n            upKeyPressed={upKeyPressed} />\n        </Suspense>\n        <OrbitControls enableZoom={true} enablePan={true} />\n      </Canvas>\n      <Keyboard setUpKeyPressed={setUpKeyPressed} />\n    </div>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}